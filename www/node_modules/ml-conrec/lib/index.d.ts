import { NumberArray, NumberMatrix } from 'cheminfo-types';
import { BasicContourDrawer } from './BasicContourDrawer';
import { ShapeContourDrawer } from './ShapeContourDrawer';
interface ConrecOptions {
    xs?: Readonly<NumberArray>;
    ys?: Readonly<NumberArray>;
    swapAxes?: boolean;
}
export type ContourDrawer = BasicContourDrawer | ShapeContourDrawer;
export type ContourDrawerName = 'basic' | 'shape';
type ContourDrawerByName<DrawerName extends ContourDrawerName> = DrawerName extends 'basic' ? BasicContourDrawer : ShapeContourDrawer;
export interface DrawContourResult<DrawerName extends ContourDrawerName> {
    contours: ReturnType<ContourDrawerByName<DrawerName>['getContour']>;
    timeout: boolean;
}
export declare class Conrec {
    matrix: Readonly<NumberMatrix>;
    rows: number;
    columns: number;
    xs: Readonly<NumberArray>;
    ys: Readonly<NumberArray>;
    swapAxes: boolean;
    hasMinMax: boolean;
    min: number;
    max: number;
    constructor(matrix: Readonly<NumberMatrix>, options?: ConrecOptions);
    drawContour<DrawerName extends ContourDrawerName>(options: {
        levels?: readonly number[];
        nbLevels?: number;
        contourDrawer?: DrawerName;
        timeout?: number;
    }): DrawContourResult<DrawerName>;
    _computeMinMax(): void;
}
export {};
//# sourceMappingURL=index.d.ts.map