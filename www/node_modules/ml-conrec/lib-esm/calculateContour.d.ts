import { NumberArray, NumberMatrix } from 'cheminfo-types';
import { ContourDrawer } from '.';
interface CalculateContourOptions {
    /**
     * Maximum number of ms before returning from the function, default unlimited.
     */
    timeout?: number;
    ilb?: number;
    iub?: number;
    jlb?: number;
    jub?: number;
}
/**
 * contour is a contouring subroutine for rectangularily spaced data
 *
 * It emits calls to a line drawing subroutine supplied by the user which
 * draws a contour map corresponding to real*4data on a randomly spaced
 * rectangular grid. The coordinates emitted are in the same units given in
 * the x() and y() arrays.
 *
 * Any number of contour levels may be specified but they must be in order of
 * increasing value.
 *
 * @private
 * @param matrix - matrix of data to contour
 *
 *             The following two, one dimensional arrays (x and y) contain
 *             the horizontal and vertical coordinates of each sample points.
 * @param x  - data matrix column coordinates
 * @param y  - data matrix row coordinates
 * @param z  - contour levels in increasing order.
 * @param contourDrawer object that implements contourDraw for drawing contour.  Defaults to a
 *                               custom "contour builder", which populates the
 *                               contours property.
 * @returns Whether contour generation had to stop early because it reached the timeout
 */
export declare function calculateContour(matrix: Readonly<NumberMatrix>, x: Readonly<NumberArray>, y: Readonly<NumberArray>, z: Readonly<NumberArray>, contourDrawer: ContourDrawer, options?: CalculateContourOptions): boolean;
export {};
//# sourceMappingURL=calculateContour.d.ts.map